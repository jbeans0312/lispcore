
(defun  print_instances (symbol-481)
  (terpri)
      (print "The instances in Class 1 are")
      (terpri)
      (print (get symbol-481 1))
      (terpri)
      (print "The instances in Class 2 are")
      (terpri)
      (print (get symbol-481 2))
      (terpri)
      (print "The instances in Class 3 are")
      (terpri)
      (print (get symbol-481 3))
      (terpri)
      (print "The instances in Class 4 are")
      (terpri)
      (print (get symbol-481 4))
      (terpri)
      (print "The instances in Class 5 are")
      (terpri)
      (print (get symbol-481 5))
      (terpri)
      (print "The instances in Class 6 are")
      (terpri)
      (print (get symbol-481 6))
      (terpri)
      (print "The instances in Class 7 are")
      (terpri)
      (print (get symbol-481 7))
      (terpri)
     (terpri)  (terpri)
     )

(defun get_instances_in_class (lst class)
  (cond ((null lst) nil)
	((equal (get (car lst) 'TYPE?) class)
		(cons (car lst) (get_instances_in_class (cdr lst) class)))
	(t (get_instances_in_class (cdr lst) class))))


(defun print_instances_with_class_value (stratified-list k)
; print the instances in stratified-list by class value					     
; k is the class value of the instances to be printed
  (terpri)     
      (terpri)
      (let ((instances (get_instances_in_class stratified-list k)))
	    (format  t "The number of instances in Class ~A  is  ~A" k (length instances))
	    (terpri)
            
            (princ "The instances in the Class are")
            (terpri)
            (print instances)
            (terpri)))

(defun print_instances_by_class_value (stratified-list num-classes)
 ; print all the instances in stratified-list by class value
 ; num-classes is the number of classes
  (defun print_instances_by_class_value_helper (stratified-list k num-classes)
    (cond((> k num-classes) nil)
	 (t (print_instances_with_class_value stratified-list k)
	    (print_instances_by_class_value_helper stratified-list (+ k 1) num-classes))))
  (print_instances_by_class_value_helper stratified-list 1 7))
      
(defun test-11 ()
  (with-open-file (*standard-output*
                 "/Users/jbeans/lispcore/11/OUTPUT-LEARNIING"
                 :direction :output
                 :if-exists :supersede)
		  (print "starting test-11.lisp") (terpri)
		  (print "print the results of function collect_examples_by_class")
		  (terpri)		  
		  (print_instances (collect_examples_by_class 'symbol-481 *examples*))
		  (terpri)
		  (print "**********************************************************************")
		  (terpri)
		  (terpri)
		  (print "print the results of function  get_stratified_set with percent = 50%")
		  (print_instances_by_class_value (get_stratified_set 'symbol-481 .5) 7)
		  (print "**********************************************************************")
		  (terpri)
		  (terpri)
		  (print "print the results of function  get_stratified_set with percent = 80%")
		  (print_instances_by_class_value (get_stratified_set 'symbol-481 .8) 7)
		  (print "**********************************************************************")
		  (terpri)
		  (print "print results of first holdout_test with 50% of dataset for training")
		  (terpri) (terpri)
		  (print (holdout_test *examples* .5 'symbol-481))
		    (print "**********************************************************************")
		  (terpri)
		  (print "print results of second holdout_test with 50% of dataset for training")
		  (terpri) (terpri)
		  (print (holdout_test *examples* .5 'symbol-481))
		    (print "**********************************************************************")
		  (terpri)
		  (print "print results of first holdout_test with 80% of dataset for training")
		  (terpri) (terpri)
		  (print (holdout_test *examples* .8 'symbol-481))
		    (print "**********************************************************************")
		  (terpri)
		  (print "print results of second  holdout_test with 80% of dataset for training")
		  (terpri) (terpri)
		  (print (holdout_test *examples* .8 'symbol-481))
		    (print "**********************************************************************")
		  (terpri)
		  (print "print results of repeated_holdout_test with 60% of dataset for training repeated 10 times")
		  (terpri) (terpri)
		  (print (repeated_holdout_test *examples* .6 10 'symbol-481))
		  nil
		  ))
     


 
